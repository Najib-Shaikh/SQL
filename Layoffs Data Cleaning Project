--Data Cleaning Project
--Author Najib Shaikh


--Data overview
SELECT * FROM layoffs;

--create a copy of original layoffs table as layoffs_staging table. We will use layoffs_staging table for data cleaning so that we have original layoffs table with the raw data in case something happens
CREATE TABLE layoffs_staging LIKE layoffs;
SELECT * FROM layoffs_staging;
INSERT INTO layoffs_staging 
SELECT * FROM layoffs;



-- steps For data cleaning
-- 1. check for duplicates and remove any duplicates
-- 2. standardize data and fix errors
-- 3. check for null values 
-- 4. remove unnecessary columns and rows 


------------------------ 1. check for duplicates and remove any duplicates --------------------


--adding row_num using window function
SELECT *,
ROW_NUMBER() OVER( 
PARTITION BY company, location, industry, total_laid_off, percentage_laid_off, 'date', stage, country, funds_raised_millions) AS Row_num
 FROM layoffs_staging;


--checking for duplicate using common table expression
 WITH duplicate_cte AS 
 (SELECT *,
ROW_NUMBER() OVER( 
PARTITION BY company, location, industry, total_laid_off, percentage_laid_off, 'date', stage, country, funds_raised_millions) AS Row_num
 FROM layoffs_staging)
 SELECT * 
 FROM duplicate_cte
 WHERE row_num > 1;

 SELECT * FROM world_layoffs.layoffs_staging;

--crete new table layoffs_staging2 to delate duplicate since we cannot update cte
CREATE TABLE `layoffs_staging2` (
`company` text,
`location`text,
`industry`text,
`total_laid_off` INT,
`percentage_laid_off` text,
`date` text,
`stage`text,
`country` text,
`funds_raised_millions` int,
row_num INT
);
 
 SELECT * FROM layoffs_staging2

--insert value from layoffs_staging into layoffs_staging2
INSERT INTO layoffs_staging2
SELECT *,
ROW_NUMBER() OVER( 
PARTITION BY company, location, industry, total_laid_off, percentage_laid_off, 'date', stage, country, funds_raised_millions) AS Row_num
FROM layoffs_staging;

--check for duplicates
SELECT * 
 FROM layoffs_staging2
 WHERE row_num > 1;

--delate duplicates
 SET SQL_SAFE_UPDATES = 0;
 DELETE FROM layoffs_staging2 WHERE row_num >= 2;
 SET SQL_SAFE_UPDATES = 1;
 
 
--------------------------2. standardize data and fix errors ------------------------------------------


SELECT * FROM layoffs_staging2

--standardize company column using trim function
 SELECT company, TRIM(company)
 FROM layoffs_staging2;
 UPDATE layoffs_staging2
 SET company = TRIM(company);

--cryto industry have been called by diff name lets standardize all to crypto
 UPDATE layoffs_staging2
 SET industry = "Crypto"
 WHERE industry LIKE "Crypto%"

--standardize country column using trim function
UPDATE layoffs_staging2
 SET Country = TRIM(TRAILING '.' FROM Country)
 WHERE Country LIKE "United States%";

--use STR_TO_DATE function to date from string to date format
 UPDATE layoffs_staging2
 SET date = STR_TO_DATE(date, '%m/%d/%Y');
 ALTER TABLE layoffs_staging2
 MODIFY COLUMN date DATE;


--------------------------3. check for null values --------------------------------

--first set industry as null where its blank as they are typically easier to work with
UPDATE layoffs_staging2
SET industry = NULL
WHERE industry = '';

--populate industry value where there is null
 UPDATE layoffs_staging2 t1
JOIN layoffs_staging2 t2
ON t1.company = t2.company
SET t1.industry = t2.industry
WHERE t1.industry IS NULL
AND t2.industry IS NOT NULL;

SELECT DISTINCT stage FROM layoffs_staging2;

--update location column using trim function
UPDATE layoffs_staging2
SET location = TRIM(TRAILING "." FROM location);


------------------------ 4. remove unnecessary columns and rows --------------------------

--dropping unnecessary row_num column which is not required now
ALTER TABLE layoffs_staging2
DROP COLUMN row_num;

--Finally clleaned dataset
SELECT * FROM layoffs_staging2;
